#include <graphics.h>//图形库
#include<stdio.h>
#include <conio.h>//控制台
#include <time.h>//时间
#include <stdlib.h>
#include <mmsystem.h>//音频播放
#include <fstream>//文件流
#include <sstream>//字符串流
#include <vector>//引入std::vector容器
#include <string>//字符串处理
#pragma comment(lib, "winmm.lib")//音乐播放

#define WIDTH 800//窗口宽度
#define HEIGHT 600//窗口高度
#define MAX_OBJECTS 20//场上物品最大数量
#define PROP_DURATION 10000  //游戏道具使用时长
#define REFRESH_THRESHOLD 5  //游戏场景中物品刷新阈值

// 定义物品类型枚举
enum class ObjectType {
    GOLD,//金矿
    STONE,//石头
    DIAMOND,//砖石
    MOUSE,//老鼠
    DEFAULT//其他
};

// 定义道具类型枚举
enum class PropType {
    POTION,//药水：一定时间内使拉取速度变快
    FIRECRACKER,//爆竹：立即引爆当前拉取的物体并获得相应分数
    DIAMOND_COLLECTOR//砖石收藏家：一定时间内砖石价值变高
};

// 定义物品结构体
typedef struct {
    int x;
    int y;//坐标
    int value;//价值
    ObjectType type;//类型
    int radius;//半径
    int moveDir;//移动方向
} Object;

// 定义吊钩结构体
typedef struct {
    int x;
    int y;//吊钩坐标
    int direction;//方向//0表示向左，1表示向右
    int is_down;//标记吊钩向上还是向下//0表示向左//1表示向右
    int attached_object;//表示是否抓取到物体//抓取到了对应一个索引值，没有则为-1
    int line_x;
    int line_y;//通过吊钩与矿工的位置坐标绘制直线
    int pullSpeed;//表示吊钩拉取速度
} Hook;

// 定义道具结构体
typedef struct {
    PropType type;//道具类型
    int remainingTime;//持续时间
} Prop;

// 账户结构体
typedef struct {
    std::string username;//用户名
    int score;//分数
    int coins;//金币
} Account;

void init_game(Object objects[], Hook* hook);//初始化游戏场景
/*  负责人：***
----------------------------------------view---------------------------------------------
----------------------------------------view---------------------------------------------
-----------------------------------service-----------------------------------------------------
    功能：初始化游戏场景，为?objects?数组中的每个物品随机分配类型、位置、移动方向、价值和半径等属性，并设置吊钩?hook?的初始位置、状态及拉取速度等初始参数。
    1.随机数种子初始化（确保每次游戏有不同的初始场景）
    2.物品初始化(随机产生不同的物品类型）
    3.物品类型属性初始化：如大小，价值（建议：用随机数。如GOLD的价值在20~100之间）
    4.吊钩初始化(如坐标线长）
----------------------------------srevice-----------------------------------------------------
    参数：Object objects[], Hook* hook
    返回值：void
*/
void draw_game(Object objects[], Hook* hook, int score, Prop prop, int num_objects);//绘游戏场景
/*
负责人：***
--------------------------------view-----------------------------------------------------
功能：绘制游戏场景，包括所有物品（根据物品类型填充不同颜色并显示价值）、吊钩及连线，同时在界面上显示当前得分、金币数量以及道具剩余时间。
     1.清空绘图设备
     2.描绘图像(物品、吊钩、得分、金币、道具剩余时间）
--------------------------------view-----------------------------------------------------
-------------------------------service------------------------------------------------------------------
-------------------------------service------------------------------------------------------------------
参数：Object objects[], Hook* hook, int score, Prop prop, int num_objects
返回值：void
*/
void move_hook(Hook* hook);
/*
负责人：***
------------------------------------view----------------------------------
功能：根据吊钩当前的状态（是否下降）和摆动方向，更新吊钩的位置，实现吊钩的上下移动和左右摆动效果。
      1.上下摆逻辑
      2.左右摆逻辑
      3.更新起点与连线的坐标
----------------------------------view-----------------------------------
-------------------------------service------------------------------------------------------------------
-------------------------------service------------------------------------------------------------------
参数：Hook* hook
返回值：void
*/
void move_mice(Object objects[], int numObjects);
/*
负责人：***
------------------------------------view--------------------------------
功能：遍历?objects?数组，对于类型为老鼠的物品，根据其移动方向更新位置，实现老鼠在场景中的移动。
      1.循环遍历物品
      2.找到物品（老鼠）
      3.根据方向移动老鼠（moveDir）为0左移，为1右移
------------------------------------view--------------------------------
-------------------------------service------------------------------------------------------------------
-------------------------------service------------------------------------------------------------------
参数：Object objects[], int numObjects
返回值：void
*/

int catch_object(Object objects[], Hook* hook, int num_objects);
/*
负责人：***
功能：检测吊钩与场景中物品的距离，判断吊钩是否抓住了物品。如果抓住，记录被抓物品的索引并返回成功标志。
------------------------------------view-----------------------------
---------------------------------------view--------------------------------
-------------------------------service------------------------------------------------------------------
1.循环遍历物品
2.计算吊钩与物品的距离
3.判断是否抓住物品（物品中心加半径，抓住物品return 1，未抓住return 0
参数：Object objects[], Hook* hook, int num_objects
返回值：1/0
-------------------------------service------------------------------------------------------------------
*/
int pull_up(Object objects[], Hook* hook, Prop prop, int& num_objects);
/*
功能：当吊钩抓住物品并上升时，计算该物品对应的得分（考虑道具对钻石价值的影响），将被抓物品从场景中移除（通过与最后一个物品交换位置并减少物品数量），返回该物品的得分。
------------------------------service------------------------------------------
1.检查是否抓住物品（前提）
2.获取物品价值并考虑道具效果（如砖石加分）
3.移除被抓物品（抓到得分之后消失）
4.返回得分（value)，未抓到返回0
参数：Object objects[], Hook* hook, Prop prop, int& num_objects
返回值：value/0
------------------------------service------------------------------------------
*/
void draw_menu();
/*
  负责人：***
  -------------------view-------------------------
功能：绘制游戏主菜单界面，包括游戏标题以及各个功能选项（单人模式、双人模式、设置、音乐控制、退出游戏、注册账户、选择账户）的文字显示。
      1.背景
      2.标题
      3.菜单项
------------------view-------------------------
参数：void
返回值：void
*/
void draw_pause_menu();
/*
负责人：***
------------------view-------------------------
功能：绘制游戏暂停界面，包含暂停提示以及暂停后的操作选项（游戏商店、返回游戏、退出游戏）的文字显示。
       1.背景
       2.标题
       3.菜单项
------------------view-------------------------
参数：void
返回值：void
*/
void draw_shop_menu(Account account);
/*
负责人：***
------------------view-------------------------
功能：绘制游戏商店界面，展示各种道具及其价格，并显示当前账户的金币数量。
        1.背景
        2.标题
        3.道具及价格
        4.金币数量
------------------view-------------------------
参数：Account account
返回值：void
*/
void music_control();
/*
* 负责人：***
功能：控制游戏音乐的播放与暂停状态，切换静音和非静音模式。
      1.设置静态变量
      2.通过改变静态变量实现静音与播放
参数：void
返回值：void
*/
std::vector<Account>load_accounts();//注：这是c++语法

/*
* 负责人：***
----------------service---------------------- -
功能：从文件?accounts.txt?中读取账户信息，将每个账户的用户名、得分和金币数量解析并存储到?Account?结构体的向量中，返回该向量。
     1.向量和文件流初始化
     2.文件循环读取
     3.返回账户向量
----------------service---------------------- -
参数：void
返回值：void
*/
void save_accounts(const std::vector<Account>& accounts);
/*
* 负责人：***
* -------------view--------------------
功能：将?accounts?向量中存储的所有账户信息写入文件?accounts.txt?，覆盖原有内容，实现账户信息的持久化保存。
       1.打开文件：
       创建一个输出文件流对象?file?，并尝试打开名为?accounts.txt?的文件。如果文件不存在，会创建一个新文件；如果文件已存在，会覆盖原有内容。
       2.写入账户信息
       如果文件成功打开，遍历?accounts?向量中的每个账户。对于每个账户，将其用户名、得分和金币数量以逗号分隔的形式写入文件，
       并在每行末尾添加换行符。完成所有账户信息的写入后，关闭文件。这样，文件?accounts.txt?中就保存了所有账户的信息，每行代表一个账户，各字段之间用逗号分隔。
 -------------view--------------------
 参数：void
返回值：void
*/
void register_account(std::vector<Account>& accounts);
/*
* 负责人：***
功能：引导用户输入用户名进行账户注册。检查输入的用户名是否已存在，若不存在则创建新账户并添加到?accounts?向量中，同时保存账户信息到文件。
       1.绘制菜单并提示输入
        如：调用?draw_menu?函数绘制主菜单，然后设置文本颜色为黑色，字体为30号宋体，在窗口特定位置输出提示信息，要求用户输入用户名。
       2.获取用户输入
    定义一个字符串?username?用于存储用户输入的用户名。创建一个?INPUTBOX?结构体对象?ib?，设置其位置、大小、可输入
    字符数等属性，并启用输入法。调用?getinputbox?函数获取用户输入的字符串，并将其赋值给?username?。
      3.检查用户名唯一性
    遍历已有的?accounts?向量，检查是否存在与用户输入用户名相同的账户。
    如果存在，重新绘制主菜单，设置文本颜色为红色，提示用户“用户名已存在，请重试”。然后等待用户按下任意键，之后返回，不进行新账户的创建。
    4.创建并保存新账户
    如果用户名唯一，创建一个新的?Account?结构体对象，初始得分为0，初始金币数也为0，并将其添加到?accounts?向量中。最后调用?save_accounts?函数，将更新后的账户信息保存到文件?accounts.txt?中。
    参数：void
    返回值：void
*/
int select_account(const std::vector<Account>& accounts);
/*
* 负责人：***
功能：显示所有账户列表，提示用户选择账户。等待用户输入选择序号，验证输入的有效性，返回用户选择的账户在?accounts?向量中的索引。
     1.绘制菜单并提供选择
    调用?draw_menu?函数绘制主菜单，设置文本颜色为黑色，字体为30号宋体，在窗口特定位置输出提示信息，告知用户选择账户。
    2.显示账户列表：
    遍历?accounts?向量，为每个账户生成一个选项字符串，格式为“序号.用户名”。然后在窗口的不同位置输出这些选项，形成账户列表供用户选择。
    3.获取用户选择并验证
    进入一个无限循环，等待用户按键。当检测到用户按下按键时，获取按键值并转换为整数?choice?。如果?choice?在有效范围内（1到账户数量之间），则返回?choice - 1?，即所选账户在?accounts?向量中的索引。
    如果?choice?无效，重新绘制主菜单，设置文本颜色为红色，提示用户“无效选择，请重试”。等待用户按下任意键后，再次绘制菜单并显示账户列表，继续等待用户输入。
    参数：void
    返回值：int
*/
void generate_new_objects(Object objects[], int& num_objects);
/*
* 负责人：***
* ----------------service---------------------- -
功能：当场景中的物品数量不足时，生成新的物品填充场景。为新物品随机分配类型、位置、移动方向、价值和半径等属性，并更新物品数量。

      1.计算需要生成的物品数量：
      计算当前场景中需要生成的新物品数量，?MAX_OBJECTS?是预先定义的场景中物品的最大数量，?num_objects?是当前场景中已有的物品数量。
      2.生成新物品循环：
      此循环遍历需要生成的新物品数量，为每个新物品设置属性。
      3.随机确定物品类型
      使用?rand() % 4?生成一个0到3之间的随机整数?typeIndex?，将其转换为?ObjectType?枚举类型来确定物品的类型，并赋值给?objects[i].type?。
      4.随机设置物品位置和移动方向
      为新物品随机生成横坐标?x?和纵坐标?y?，使其出现在窗口内合适的位置（避免出现在窗口边界太近的地方）。同时，随机生成移动方向?moveDir?，可能用于控制物品的移动方向。
      5.根据物品类型设置属性
      使用?switch - case?语句根据物品类型?type?设置物品的价值?value?和半径?radius?。不同类型的物品有不同的价值范围和半径大小。
      6.更新物品数量
      将当前场景中的物品数量更新为最大数量?MAX_OBJECTS?，表示场景中的物品已补充完整。
----------------service---------------------- -
参数：Object objects[], int& num_objects
返回值：void
*/
void handle_single_player_mode(Account& account, int selected_account_index);
/*
* 负责人：***
* ----------------service---------------------- -
功能：处理单人游戏模式的整个流程，包括初始化游戏相关参数，进入游戏循环。在循环中，不断绘制游戏场景、更新吊钩和物品位置、检测物品抓取、计算得分、处理道具效果、处理暂停操作以及判断游戏是否结束等。
      1.变量初始化(所有数据）
      2.进入游戏循环while（true)
      3.判断游戏是否暂停
      如果游戏未暂停，执行以下操作：
- 调用?draw_game?函数绘制游戏场景，包括物品、吊钩、得分、道具等信息。
- 调用?move_hook?函数移动吊钩，?move_mice?函数移动老鼠物品。
- 如果吊钩正在下降，检查是否抓住物品（调用?catch_object?函数），若抓住则停止下降。
- 如果吊钩不在下降（上升阶段），调用?pull_up?函数提升吊钩并计算得分，同时检查物品数量是否低于刷新阈值?REFRESH_THRESHOLD?，若低于则调用?generate_new_objects?函数生成新物品。
- 如果得分达到1000分，显示“你赢了！”的提示，等待用户按键，更新账户得分并保存账户信息，然后退出游戏循环。
- 如果道具的剩余时间大于0，减少道具剩余时间，当剩余时间为0时，将道具类型设为默认，若道具类型为药水，恢复吊钩的初始拉取速度。
     4.鼠标事件处理
     如果检测到鼠标事件，且是鼠标左键按下事件：
- 如果游戏已暂停，调用?handle_pause_menu?函数处理暂停菜单的操作，并更新暂停状态。
- 如果游戏未暂停，将游戏设为暂停状态，并绘制暂停菜单
     5.键盘事件处理
     如果检测到键盘按键按下事件，且按下的键为?s?，并且吊钩抓住了石头物品，则将吊钩的拉取速度设为10。
     6.控制帧率
      ----------------service---------------------- -
     参数：Account& account, int selected_account_index
     返回值：void
    
*/
bool handle_pause_menu(const MOUSEMSG& m, Account& account, Hook& hook, Prop& prop, int& num_objects, int score);
/*
负责人：***
* ----------------service---------------------- -
功能：处理暂停菜单中的鼠标点击事件。根据鼠标点击位置判断用户选择的操作（进入商店、返回游戏、退出游戏），执行相应操作并返回是否继续暂停的状态。
      1.获取鼠标点击位置
      2.判断点击区域并执行操作
      3.如果未点击相应位置返回1，表示游戏继续暂停
      ----------------service---------------------- -
      参数：const MOUSEMSG& m, Account& account, Hook& hook, Prop& prop, int& num_objects, int score
      返回值：ture/false
*/
void handle_shop(Account& account, Hook& hook, Prop& prop, int& num_objects, int score);
/*
* 负责人：***
功能：处理游戏商店中的鼠标点击事件。根据鼠标点击位置判断用户想要购买的道具，检查账户金币是否足够购买。如果足够，扣除金币并应用道具效果；如果不足，显示提示信息。
----------------------view----------------------
     1.绘制商店界面
----------------------view------------------------
     ----------------service---------------------- -
     2.while(ture)
     {
     进入循环，等待鼠标处理
     满足：
     - 根据鼠标点击位置判断玩家点击的道具按钮。
- 如果点击的是“爆竹”按钮且玩家金币足够，扣除50金币，若吊钩抓住了物品，获取物品得分并移除该物品。若金币不足，显示“金币不足”提示，等待玩家按键后重新绘制商店界面。
- 如果点击的是“药水”按钮且金币足够，扣除80金币，设置道具类型为药水，设置道具持续时间，并提高吊钩拉取速度。金币不足时同样显示提示并重新绘制界面。
- 如果点击的是“砖石收藏家”按钮且金币足够，扣除120金币，设置道具类型为砖石收藏家，设置道具持续时间。金币不足时处理方式相同。
- 无论是否成功购买道具，都跳出循环，等待下一次鼠标点击事件
----------------service---------------------- -
     }
     参数：Account& account, Hook& hook, Prop& prop, int& num_objects, int score
     返回值：void
*/
int main()
{
   // 负责人：***
    /*功能：程序入口，负责初始化图形界面，加载账户信息。进入主循环，在循环中不断绘制主菜单并处理用户在主菜单中的各种选择，如启动单人游戏、进入双人游戏（暂未实现）、设置（暂未实现）、
        控制音乐、退出游戏、注册账户、选择账户等，通过调用其他函数实现游戏的整体流程控制。*/
}